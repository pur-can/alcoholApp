{
  "name": "capture-exit",
  "version": "1.2.0",
  "description": "safely cleanup in signal handlers",
  "main": "index.js",
  "scripts": {
    "test": "mocha test",
    "test:debug": "mocha debug test"
  },
  "files": [
    "index.js"
  ],
  "repository": {
    "type": "git",
    "url": "git+https://github.com/stefanpenner/capture-exit.git"
  },
  "author": {
    "name": "Stefan Penner",
    "email": "stefan.penner@gmail.com"
  },
  "license": "ISC",
  "bugs": {
    "url": "https://github.com/stefanpenner/capture-exit/issues"
  },
  "homepage": "https://github.com/stefanpenner/capture-exit#readme",
  "devDependencies": {
    "chai": "^3.5.0",
    "execa": "0.4.0",
    "mocha": "^3.1.2",
    "ora": "^0.3.0"
  },
  "dependencies": {
    "rsvp": "^3.3.3"
  },
  "readme": "# capture-exit\n\n[![Build status](https://ci.appveyor.com/api/projects/status/8044m918rwic8b9n/branch/master?svg=true)](https://ci.appveyor.com/project/embercli/capture-exit/branch/master)\n[![Build Status](https://travis-ci.org/ember-cli/capture-exit.svg?branch=master)](https://travis-ci.org/ember-cli/capture-exit)\n\nAllow cooprative async exit handlers, we unfortunately must hijack\nprocess.exit.\n\nIt allows a handler to ensure exit, without that exit handler impeding other\nsimilar handlers\n\nfor example, see: [sindresorhus/ora#27](https://github.com/sindresorhus/ora/issues/27)\n\nDifferences between `process.on('exit')` and `captureExit.onExit(...)` => https://github.com/ember-cli/capture-exit/issues/12\n",
  "readmeFilename": "README.md",
  "_id": "capture-exit@1.2.0",
  "dist": {
    "shasum": "882d156240fca069a81a9abaf7ce51a976f4c59e"
  },
  "_from": "capture-exit@^1.2.0",
  "_resolved": "https://registry.npmjs.org/capture-exit/-/capture-exit-1.2.0.tgz"
}
